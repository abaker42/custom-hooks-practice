{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useHttp = (requestConfig, transData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\n      /**GET methods do not need the method,header,or body attached to call so I used a ternary expression to get the values\r\n       * if passed, other with pass GET with null values\r\n       */\n      requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      transData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  };\n\n  return {\n    isLoading,\n    // = isLoading: isLoading,\n    error,\n    // = error: error,\n    sendRequest // = sendRequest: sendRequest\n\n  };\n};\n\n_s(useHttp, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\n\nexport default useHttp;","map":{"version":3,"names":["useState","useHttp","requestConfig","transData","isLoading","setIsLoading","error","setError","sendRequest","taskText","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"sources":["C:/WorkSpace/React/custom-hooks-practice/src/hooks/use-http.js"],"sourcesContent":["import { useState } from 'react';\r\n\r\nconst useHttp = (requestConfig, transData) => {\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tconst sendRequest = async (taskText) => {\r\n\t\tsetIsLoading(true);\r\n\t\tsetError(null);\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\r\n\t\t\t\t/**GET methods do not need the method,header,or body attached to call so I used a ternary expression to get the values\r\n\t\t\t\t * if passed, other with pass GET with null values\r\n\t\t\t\t */\r\n\t\t\t\trequestConfig.url,\r\n\t\t\t\t{\r\n\t\t\t\t\tmethod: requestConfig.method ? requestConfig.method : 'GET',\r\n\t\t\t\t\theaders: requestConfig.headers ? requestConfig.headers : {},\r\n\t\t\t\t\tbody: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error('Request failed!');\r\n\t\t\t}\r\n\r\n\t\t\tconst data = await response.json();\r\n\t\t\ttransData(data);\r\n\t\t} catch (err) {\r\n\t\t\tsetError(err.message || 'Something went wrong!');\r\n\t\t}\r\n\t\tsetIsLoading(false);\r\n\t};\r\n\r\n\treturn {\r\n\t\tisLoading, // = isLoading: isLoading,\r\n\t\terror, // = error: error,\r\n\t\tsendRequest, // = sendRequest: sendRequest\r\n\t};\r\n};\r\n\r\nexport default useHttp;\r\n"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;EAAA;;EAC7C,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;;EAEA,MAAMQ,WAAW,GAAG,MAAOC,QAAP,IAAoB;IACvCJ,YAAY,CAAC,IAAD,CAAZ;IACAE,QAAQ,CAAC,IAAD,CAAR;;IACA,IAAI;MACH,MAAMG,QAAQ,GAAG,MAAMC,KAAK;MAC3B;AACJ;AACA;MACIT,aAAa,CAACU,GAJa,EAK3B;QACCC,MAAM,EAAEX,aAAa,CAACW,MAAd,GAAuBX,aAAa,CAACW,MAArC,GAA8C,KADvD;QAECC,OAAO,EAAEZ,aAAa,CAACY,OAAd,GAAwBZ,aAAa,CAACY,OAAtC,GAAgD,EAF1D;QAGCC,IAAI,EAAEb,aAAa,CAACa,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAef,aAAa,CAACa,IAA7B,CAArB,GAA0D;MAHjE,CAL2B,CAA5B;;MAYA,IAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;QACjB,MAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;MACA;;MAED,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;MACAlB,SAAS,CAACiB,IAAD,CAAT;IACA,CAnBD,CAmBE,OAAOE,GAAP,EAAY;MACbf,QAAQ,CAACe,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;IACA;;IACDlB,YAAY,CAAC,KAAD,CAAZ;EACA,CA1BD;;EA4BA,OAAO;IACND,SADM;IACK;IACXE,KAFM;IAEC;IACPE,WAHM,CAGO;;EAHP,CAAP;AAKA,CArCD;;GAAMP,O;;AAuCN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}